For continuous time system: x dot = Ax + Bu where u = K(r-x); r is reference and x is state
A_closedloop = A - BK where K is gain matrix; BK part makes it closedloop
A is dynamics model not including system response
B is input response matrix
Optimize K such that poles of A_closedloop aka eigen values (which are complex and defined as ) meet certain requirements where a system can be defined as stable or unstable wrt system oscillations
Pole placement just means making system do what you want wrt oscillations

Discretize continuous versions of functions to use it functionally

Fact Check:
"the real part is the stretch of the eigenvector, and imaginary is the rotation in the 2D plane"


Prediction Step:
Get Equation
Get into Ax + Bu form


Things in state space need to be derivatives or different equations

Ex:

Position state and velocity input:

dx/dt = v
dx/dt = 0 x + 1 v
dx/dt = Ax + Bu

Ax+Bu integrated over some time horizon is the prediction

Things no longer representable in state space when nonlinear, requires jacobian to get linear approximations
